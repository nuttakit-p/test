[
  {
    "id": 1,
    "text": "คุณลักษณะใดที่สำคัญที่สุดสำหรับ software engineer ที่ดี?",
    "answers": [
      {
        "id": 1,
        "text": "ความสามารถในการเขียนโค้ดเร็ว"
      },
      {
        "id": 2,
        "text": "การสื่อสารที่ดี"
      },
      {
        "id": 3,
        "text": "ความเชี่ยวชาญในภาษาโปรแกรมมิ่งเฉพาะ"
      },
      {
        "id": 4,
        "text": "การทำงานล่วงเวลาเป็นประจำ"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 2,
    "text": "ข้อใดเป็นทักษะที่สำคัญที่สุดในการแก้ปัญหา (Problem Solving) สำหรับ software engineer?",
    "answers": [
      {
        "id": 1,
        "text": "การจำโค้ดได้มาก"
      },
      {
        "id": 2,
        "text": "การคิดวิเคราะห์อย่างเป็นระบบ"
      },
      {
        "id": 3,
        "text": "การใช้ Stack Overflow บ่อยๆ"
      },
      {
        "id": 4,
        "text": "การเขียนโค้ดให้ซับซ้อนที่สุด"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 3,
    "text": "ข้อใดไม่ใช่หลักการของ Clean Code?",
    "answers": [
      {
        "id": 1,
        "text": "การตั้งชื่อที่มีความหมาย"
      },
      {
        "id": 2,
        "text": "การแบ่งโค้ดเป็นฟังก์ชันขนาดเล็ก"
      },
      {
        "id": 3,
        "text": "การเขียนคอมเมนต์ทุกบรรทัด"
      },
      {
        "id": 4,
        "text": "การหลีกเลี่ยงการทำซ้ำ (DRY principle)"
      }
    ],
    "correctAnswerId": 3
  },
  {
    "id": 4,
    "text": "ข้อใดเป็นประโยชน์ของการใช้ Version Control System เช่น Git?",
    "answers": [
      {
        "id": 1,
        "text": "ทำให้โค้ดทำงานเร็วขึ้น"
      },
      {
        "id": 2,
        "text": "ช่วยในการทำงานร่วมกันและติดตามการเปลี่ยนแปลง"
      },
      {
        "id": 3,
        "text": "ลดความจำเป็นในการทดสอบ"
      },
      {
        "id": 4,
        "text": "เพิ่มความปลอดภัยของระบบโดยอัตโนมัติ"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 5,
    "text": "ข้อใดเป็นประโยชน์หลักของการเขียน Unit Test?",
    "answers": [
      {
        "id": 1,
        "text": "ทำให้โค้ดทำงานเร็วขึ้น"
      },
      {
        "id": 2,
        "text": "ลดเวลาในการพัฒนา"
      },
      {
        "id": 3,
        "text": "ช่วยตรวจจับข้อผิดพลาดได้เร็วขึ้นและทำให้โค้ดน่าเชื่อถือ"
      },
      {
        "id": 4,
        "text": "ทำให้ไม่ต้องทดสอบด้วยตนเองอีกเลย"
      }
    ],
    "correctAnswerId": 3
  },
  {
    "id": 6,
    "text": "ข้อใดไม่ใช่หลักการของ SOLID principles?",
    "answers": [
      {
        "id": 1,
        "text": "Single Responsibility Principle"
      },
      {
        "id": 2,
        "text": "Open-Closed Principle"
      },
      {
        "id": 3,
        "text": "Speedy Development Principle"
      },
      {
        "id": 4,
        "text": "Dependency Inversion Principle"
      }
    ],
    "correctAnswerId": 3
  },
  {
    "id": 7,
    "text": "การ Refactoring คืออะไร?",
    "answers": [
      {
        "id": 1,
        "text": "การเขียนโค้ดใหม่ทั้งหมด"
      },
      {
        "id": 2,
        "text": "การปรับปรุงโครงสร้างภายในของโค้ดโดยไม่เปลี่ยนพฤติกรรมภายนอก"
      },
      {
        "id": 3,
        "text": "การเพิ่มฟีเจอร์ใหม่"
      },
      {
        "id": 4,
        "text": "การลบโค้ดที่ไม่ใช้แล้วออก"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 8,
    "text": "ข้อใดเป็นประโยชน์ของการใช้ Design Patterns?",
    "answers": [
      {
        "id": 1,
        "text": "ทำให้โค้ดทำงานเร็วขึ้นเสมอ"
      },
      {
        "id": 2,
        "text": "ช่วยแก้ปัญหาที่พบบ่อยด้วยวิธีที่ได้รับการพิสูจน์แล้ว"
      },
      {
        "id": 3,
        "text": "ทำให้โค้ดซับซ้อนขึ้นเสมอ"
      },
      {
        "id": 4,
        "text": "ลดความจำเป็นในการทดสอบ"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 9,
    "text": "ข้อใดเป็นวิธีที่ดีที่สุดในการจัดการกับ Technical Debt?",
    "answers": [
      {
        "id": 1,
        "text": "ละเลยและหวังว่าจะหายไปเอง"
      },
      {
        "id": 2,
        "text": "แก้ไขทันทีที่พบโดยไม่คำนึงถึงผลกระทบ"
      },
      {
        "id": 3,
        "text": "วางแผนและจัดการอย่างเป็นระบบในระยะยาว"
      },
      {
        "id": 4,
        "text": "รอให้ลูกค้าร้องเรียนก่อนจึงแก้ไข"
      }
    ],
    "correctAnswerId": 3
  },
  {
    "id": 10,
    "text": "ข้อใดเป็นประโยชน์ของการใช้ Continuous Integration (CI)?",
    "answers": [
      {
        "id": 1,
        "text": "ลดความจำเป็นในการเขียนโค้ด"
      },
      {
        "id": 2,
        "text": "ตรวจจับปัญหาการรวมโค้ดได้เร็วขึ้น"
      },
      {
        "id": 3,
        "text": "เพิ่มความเร็วในการประมวลผลของแอปพลิเคชัน"
      },
      {
        "id": 4,
        "text": "ลดความจำเป็นในการทดสอบ"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 11,
    "text": "ข้อใดเป็นวิธีที่ดีที่สุดในการจัดการกับข้อผิดพลาดในโค้ด?",
    "answers": [
      {
        "id": 1,
        "text": "ใช้ try-catch ทุกที่ที่เป็นไปได้"
      },
      {
        "id": 2,
        "text": "ละเลยและหวังว่าจะไม่เกิดขึ้น"
      },
      {
        "id": 3,
        "text": "จัดการเฉพาะข้อผิดพลาดที่คาดการณ์ได้และบันทึก (log) ข้อผิดพลาดที่ไม่คาดคิด"
      },
      {
        "id": 4,
        "text": "ปิดการแจ้งเตือนข้อผิดพลาดทั้งหมด"
      }
    ],
    "correctAnswerId": 3
  },
  {
    "id": 12,
    "text": "ข้อใดเป็นแนวทางที่ดีที่สุดในการเขียนเอกสารประกอบโค้ด (Documentation)?",
    "answers": [
      {
        "id": 1,
        "text": "เขียนเอกสารให้ละเอียดที่สุดเท่าที่จะทำได้"
      },
      {
        "id": 2,
        "text": "ไม่จำเป็นต้องเขียนเอกสาร เพราะโค้ดควรอธิบายตัวเองได้"
      },
      {
        "id": 3,
        "text": "เขียนเอกสารเฉพาะส่วนที่ซับซ้อนและอธิบายเหตุผลเบื้องหลังการตัดสินใจสำคัญ"
      },
      {
        "id": 4,
        "text": "ให้ทีม QA เป็นผู้เขียนเอกสารทั้งหมด"
      }
    ],
    "correctAnswerId": 3
  },
  {
    "id": 13,
    "text": "ข้อใดเป็นประโยชน์ของการใช้ Code Review?",
    "answers": [
      {
        "id": 1,
        "text": "ทำให้โค้ดทำงานเร็วขึ้น"
      },
      {
        "id": 2,
        "text": "ช่วยแบ่งปันความรู้และปรับปรุงคุณภาพของโค้ด"
      },
      {
        "id": 3,
        "text": "ลดความจำเป็นในการทดสอบ"
      },
      {
        "id": 4,
        "text": "ทำให้การพัฒนาเร็วขึ้นเสมอ"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 14,
    "text": "ข้อใดไม่ใช่ลักษณะของ Agile Software Development?",
    "answers": [
      {
        "id": 1,
        "text": "การทำงานเป็นทีมแบบ cross-functional"
      },
      {
        "id": 2,
        "text": "การวางแผนระยะยาวอย่างละเอียดและไม่ยืดหยุ่น"
      },
      {
        "id": 3,
        "text": "การส่งมอบซอฟต์แวร์ที่ใช้งานได้บ่อยครั้ง"
      },
      {
        "id": 4,
        "text": "การปรับตัวต่อการเปลี่ยนแปลงอย่างรวดเร็ว"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 15,
    "text": "ข้อใดเป็นวิธีที่ดีที่สุดในการจัดการกับ Legacy Code?",
    "answers": [
      {
        "id": 1,
        "text": "เขียนใหม่ทั้งหมดทันที"
      },
      {
        "id": 2,
        "text": "ปล่อยไว้และไม่แตะต้อง"
      },
      {
        "id": 3,
        "text": "ค่อยๆ ปรับปรุงทีละส่วนพร้อมเพิ่ม Unit Test"
      },
      {
        "id": 4,
        "text": "ให้ทีมใหม่รับผิดชอบทั้งหมด"
      }
    ],
    "correctAnswerId": 3
  },
  {
    "id": 16,
    "text": "ข้อใดเป็นประโยชน์ของการใช้ Microservices Architecture?",
    "answers": [
      {
        "id": 1,
        "text": "ทำให้การพัฒนาและการปรับขนาดของแต่ละส่วนของระบบทำได้ง่ายขึ้น"
      },
      {
        "id": 2,
        "text": "ลดความซับซ้อนของระบบโดยรวม"
      },
      {
        "id": 3,
        "text": "ทำให้การ deploy เร็วขึ้นเสมอ"
      },
      {
        "id": 4,
        "text": "ลดความจำเป็นในการทดสอบ"
      }
    ],
    "correctAnswerId": 1
  },
  {
    "id": 17,
    "text": "ข้อใดเป็นวิธีที่ดีที่สุดในการรักษาความปลอดภัยของแอปพลิเคชัน?",
    "answers": [
      {
        "id": 1,
        "text": "ใช้ไลบรารีความปลอดภัยที่ทันสมัยและอัปเดตอยู่เสมอ"
      },
      {
        "id": 2,
        "text": "เข้ารหัสข้อมูลทั้งหมด"
      },
      {
        "id": 3,
        "text": "จำกัดการเข้าถึงจากภายนอกทั้งหมด"
      },
      {
        "id": 4,
        "text": "ใช้วิธีการรักษาความปลอดภัยหลายชั้นและทดสอบอย่างสม่ำเสมอ"
      }
    ],
    "correctAnswerId": 4
  },
  {
    "id": 18,
    "text": "ข้อใดเป็นวิธีที่ดีที่สุดในการจัดการกับ Performance Issues?",
    "answers": [
      {
        "id": 1,
        "text": "เพิ่ม Hardware ให้แรงขึ้น"
      },
      {
        "id": 2,
        "text": "ใช้เครื่องมือวัดประสิทธิภาพเพื่อระบุจุดที่เป็นปัญหาและแก้ไขอย่างตรงจุด"
      },
      {
        "id": 3,
        "text": "ลดฟีเจอร์ของแอปพลิเคชันลง"
      },
      {
        "id": 4,
        "text": "เขียนโค้ดใหม่ทั้งหมด"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 19,
    "text": "ข้อใดเป็นประโยชน์ของการใช้ Containerization (เช่น Docker)?",
    "answers": [
      {
        "id": 1,
        "text": "ทำให้แอปพลิเคชันทำงานเร็วขึ้นโดยอัตโนมัติ"
      },
      {
        "id": 2,
        "text": "ช่วยให้การ deploy และการจัดการสภาพแวดล้อมทำได้ง่ายและสม่ำเสมอ"
      },
      {
        "id": 3,
        "text": "ลดความจำเป็นในการเขียนโค้ด"
      },
      {
        "id": 4,
        "text": "เพิ่มความปลอดภัยให้กับแอปพลิเคชันโดยอัตโนมัติ"
      }
    ],
    "correctAnswerId": 2
  },
  {
    "id": 20,
    "text": "ข้อใดเป็นคุณสมบัติที่สำคัญที่สุดของ software engineer ในการทำงานเป็นทีม?",
    "answers": [
      {
        "id": 1,
        "text": "ความสามารถในการทำงานได้โดยไม่ต้องพึ่งพาผู้อื่น"
      },
      {
        "id": 2,
        "text": "ความสามารถในการสื่อสารและทำงานร่วมกับผู้อื่นได้อย่างมีประสิทธิภาพ"
      },
      {
        "id": 3,
        "text": "ความสามารถในการเขียนโค้ดได้เร็วที่สุดในทีม"
      },
      {
        "id": 4,
        "text": "ความสามารถในการทำงานได้ทุกตำแหน่งในทีม"
      }
    ],
    "correctAnswerId": 2
  }
]
